#define _POSIX_C_SOURCE 200809L
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/wait.h>
#include <unistd.h>

int main(void) {
  char *input = NULL;
  size_t buffsize = 0;
  ssize_t characters;
  pid_t pid;
  int status;

  while (true) {
    // prompt user for program
    printf("Please Enter program path you wish to run.\n> ");
    fflush(stdout);

    // get user input
    characters =
        getline(&input, &buffsize, stdin); // whoops forgot to define posix...
    // If they somehow EOF with Ctrl+D or something unexpected
    if (characters == -1) {
      printf("\n");
      break;
    }
    // remove newline replace it with null
    if (characters > 0 && input[characters - 1] == '\n') {
      input[characters - 1] = '\0';
    }
    if (strcmp(input, "fortune") == 0) {
      pid_t fortune_pid = fork();

      if (fortune_pid == 0) {
        execl("/usr/games/fortune", "/usr/games/fortune", (char *)NULL);
        printf("Fortune not available\n");
        exit(1);
      } else if (fortune_pid > 0) {
        waitpid(fortune_pid, NULL, 0);
      } else {
        printf("Fortune died :( \n");
      }
      continue;
    }
    // exit if user input empty or "exit"
    if (strlen(input) == 0 || strcmp(input, "exit") == 0) {
      printf("Exiting...\n");
      break;
    }

    pid = fork();

    if (pid == 0) {
      // path, program, end
      execl(input, input, (char *)NULL);

      printf("Failed to exec\n");
      exit(1);
    } else if (pid > 0) {
      // wait for child process to complete
      waitpid(pid, &status, 0);
    } else {
      perror("Process fork failed");
      continue;
    }
  }
  free(input);
  return 0;
}
// print("enter path to program to run)
// getline(user input)
// regex \n away
// fork and exec
// waitpid(process until it's finished)
// repeat
//
